/**
 *  Copyright 2018 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *	Author: SRPOL
 *	Date: 2018-10-15
 */

import groovy.json.JsonOutput
import physicalgraph.zigbee.zcl.DataType

metadata {
	definition (name: "Fitzstat8", namespace: "fitztstat", author: "SmartThings") {
	    capability "Actuator"
		capability "Temperature Measurement"
		capability "Thermostat"
		capability "Thermostat Mode"
		capability "Thermostat Fan Mode"
		capability "Thermostat Cooling Setpoint"
		capability "Thermostat Heating Setpoint"
		capability "Thermostat Operating State"
		capability "Configuration"
		capability "Health Check"
		capability "Refresh"
		capability "Sensor"
    capability "Relative Humidity Measurement"
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"thermostatMulti", type:"thermostat", width:6, height:4, canChangeIcon: true) {
			tileAttribute("device.temperature", key: "PRIMARY_CONTROL") {
				attributeState("temperature", label:'${currentValue}Â°', icon: "st.alarm.temperature.normal",
					backgroundColors: [
						// Celsius
						[value: 0, color: "#153591"],
						[value: 7, color: "#1e9cbb"],
						[value: 15, color: "#90d2a7"],
						[value: 23, color: "#44b621"],
						[value: 28, color: "#f1d801"],
						[value: 35, color: "#d04e00"],
						[value: 37, color: "#bc2323"],
						// Fahrenheit
						[value: 40, color: "#153591"],
						[value: 44, color: "#1e9cbb"],
						[value: 69, color: "#90d2a7"],
						[value: 68, color: "#44b621"],
						[value: 84, color: "#f1d801"],
						[value: 95, color: "#d04e00"],
						[value: 96, color: "#bc2323"]
					]
				)
			}
            tileAttribute("device.humidity", key: "SECONDARY_CONTROL") {
				attributeState("humidity", label:'${currentValue}%', unit:"%", defaultState: true)
			}

			tileAttribute("device.thermostatOperatingState", key: "OPERATING_STATE") {
				attributeState("idle", backgroundColor: "#cccccc")
				attributeState("heating", backgroundColor: "#E86D13")
				attributeState("cooling", backgroundColor: "#00A0DC")
                attributeState("auto", backgroundColor: "#00A0DC")
			}
           
			
		}
	    controlTile("thermostatMode", "device.thermostatMode", "enum", width: 2 , height: 2, supportedStates: "device.supportedThermostatModes") {
			state("off", action: "setThermostatMode", label: 'Off', icon: "st.thermostat.heating-cooling-off")
			state("cool", action: "setThermostatMode", label: 'Cool', icon: "st.thermostat.cool")
			state("heat", action: "setThermostatMode", label: 'Heat', icon: "st.thermostat.heat")
			state("auto", action: "setThermostatMode", label: 'Auto', icon: "st.tesla.tesla-hvac")
			state("emergency heat", action:"setThermostatMode", label: 'Emergency heat', icon: "st.thermostat.emergency-heat")
		}
		controlTile("heatingSetpoint", "device.heatingSetpoint", "slider",
				sliderType: "HEATING",
				debouncePeriod: 1500,
				range: "device.heatingSetpointRange",
				width: 2, height: 2) {
					state "default", action:"setHeatingSetpoint", label:'${currentValue}', backgroundColor: "#E86D13"
				}
		controlTile("coolingSetpoint", "device.coolingSetpoint", "slider",
				sliderType: "COOLING",
				debouncePeriod: 1500,
				range: "device.coolingSetpointRange",
				width: 2, height: 2) {
					state "default", action:"setCoolingSetpoint", label:'${currentValue}', backgroundColor: "#00A0DC"
				}
        controlTile("thermostatFanMode", "device.thermostatFanMode", "enum", width: 2 , height: 2) {
			state("on", action: "setThermostatFanMode", label: 'On', icon: "st.thermostat.heating-cooling-off")
			state("auto", action: "setThermostatFanMode", label: 'Auto', icon: "st.tesla.tesla-hvac")
		}
		standardTile("refresh", "device.thermostatMode", width: 2, height: 1, inactiveLabel: false, decoration: "flat") {
			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
	
  
		main "thermostatMulti"
		details(["thermostatMulti", "thermostatMode", "heatingSetpoint", "coolingSetpoint", "thermostatFanMode",  "refresh"])
	}
}

def initialize() {
    log.debug "initialize() - binding & attribute report"
    log.info supportedThermostatModes
    sendEvent(name: "supportedThermostatModes", value: ["off", "heat", "cool"], eventType: "ENTITY_UPDATE", displayed: false)
    // Delay polling device attribute until the config is done
    runEvery1Minute(pollDevice)
    log.info supportedThermostatModes
}

def refresh() {
	getThermo() 
}

def getThermo() {
def result = new physicalgraph.device.HubAction(
        method: "POST",
        path: "/query/info",
        headers: [
                "HOST" : "10.0.0.159:80",
                "Content-Type": "application/json"],
                null,
                [callback: parse]
	)
    log.debug result.toString()  // Get Json body from thermostat
    sendHubCommand(result);
} 

def sendThermo(){
	def result2 = new physicalgraph.device.HubAction(
		method: "POST",
		path: "/control?mode=" + state.mode + "&heattemp=" + state.heatingSetpoint + "&fan=" + state.fanmode + "&cooltemp=" + state.coolingSetpoint,
		headers: [
			HOST: "10.0.0.159:80"
        ]
		)
		[
        	sendHubCommand(result2),
        ]
		//sendEvent(name: "switch", value: "off")
        log.debug "send to Thermo"   
        log.debug result2.toString() 
        refresh()
        
}


def parse(physicalgraph.device.HubResponse hubResponse) {
log.trace "Thermo Polled"
def results = hubResponse.body
 // log.debug "in parse: $hubResponse"
 // log.debug "${hubResponse.body}"
 // log.debug hubResponse.name
  
//log.debug results

def slurper = new groovy.json.JsonSlurper()
def msg = parseLanMessage(results)
//def body = msg.body
//def result = createEvent(slurper.parseText(body))
def result = createEvent(slurper.parseText(results))
//def body = msg.body
//def result = createEvent(slurper.parseText(body))
log.debug "results" + msg

state.heatingSetpoint = result.heattemp
state.coolingSetpoint = result.cooltemp
state.mode = result.mode
state.fanmode = result.fanmode
    
sendEvent(name: "temperature", value:result.spacetemp, unit: "F" )
sendEvent(name: "humidity", value:result.hum )
sendEvent(name: "heatingSetpoint", value: state.heatingSetpoint, unit: "F" )
sendEvent(name: "coolingSetpoint", value: state.coolingSetpoint, unit: "F" )
sendEvent(name: "thermostatMode", value: state.mode)
sendEvent(name: "thermostatFanMode", value: state.fanmode)
sendEvent(name: "deviceScale", value: "F")
sendEvent(name: "supportedThermostatModes", value: ["off", "heat", "cool"], eventType: "ENTITY_UPDATE", displayed: false)

if (result.mode == 1) {
		sendEvent(name: "thermostatMode", value: "heat")
	}
	else if(result.mode == 2){
		sendEvent(name: "thermostatMode", value: "cool")
	}
   else if(result.mode == 0){
		sendEvent(name: "thermostatMode", value: "off")
	}
    else if(result.mode == 3){
		sendEvent(name: "thermostatMode", value: "auto")
	}
    
if (result.state == 1) {
		sendEvent(name: "thermostatOperatingState", value:'heating')
	}
	else if(result.state == 2){
		sendEvent(name: "thermostatOperatingState", value:'cooling')
	}
    else if(result.state == 0){
		sendEvent(name: "thermostatOperatingState", value:'idle')
	}
    else if(result.state == 3){
		sendEvent(name: "thermostatOperatingState", value:'auto')
	}
    
if (result.fanstate == 0) {
		sendEvent(name: "thermostatFanMode", value:'auto')
	}
	else if(result.fanstate == 1){
		sendEvent(name: "thermostatFanMode", value:'on')
	}
}

def setHeatingSetpoint(degrees) {
	log.trace "setHeatingSetpoint($degrees, $delay)"
    state.heatingSetpoint = "$degrees"
    state.mode = "1"
    sendThermo()
}

def setCoolingSetpoint(degrees) {
	log.trace "setHeatingSetpoint($degrees, $delay)"
    state.coolingSetpoint = "$degrees"
    state.mode = "2"
    sendThermo()
}
def setThermostatMode(mode) {
 state.ThermostatMode = "$mode"
 if (state.ThermostatMode == "heat") {
		state.mode = "1"
	}
	else if(state.ThermostatMode == "cool"){
		state.mode = "2"
	}
   else if(state.ThermostatMode == "off"){
		state.mode = "0"
	}
    else if(state.ThermostatMode == "emergency heat"){
		state.mode = "3"
	}
 sendThermo()

}

def setThermostatFanMode(fanmode) {
state.setThermostatFanMode = "$fanmode"
 if (state.ThermostatFanMode == "auto") {
		state.fanmode = "0"
	}
   else if(state.ThermostatFanMode == "on"){
		state.fanmode = "1"
	}
 sendThermo()
 log.debug "Set Fan $fanmode"
  log.info state.fanmode

}
